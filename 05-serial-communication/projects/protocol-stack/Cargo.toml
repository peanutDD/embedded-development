[package]
name = "protocol_stack"
version = "0.1.0"
edition = "2021"
authors = ["Embedded Rust Developer <dev@embedded-rust.com>"]
description = "分层协议栈实现 - 从物理层到应用层的完整通信栈"
license = "MIT OR Apache-2.0"
repository = "https://github.com/embedded-rust/protocol-stack"
keywords = ["embedded", "protocol", "uart", "communication", "stack"]
categories = ["embedded", "network-programming"]

[dependencies]
# 核心嵌入式依赖
cortex-m = "0.7"
cortex-m-rt = "0.7"
panic-halt = "0.2"
embedded-hal = "1.0"
nb = "1.1"

# 调试和日志
cortex-m-semihosting = "0.5"
log = "0.4"
rtt-target = { version = "0.4", features = ["cortex-m"] }

# 数据结构和集合
heapless = { version = "0.8", features = ["serde"] }
arrayvec = "0.7"

# 序列化和反序列化
serde = { version = "1.0", default-features = false, features = ["derive"] }
postcard = { version = "1.0", features = ["heapless"] }

# 状态机和协议处理
sm = "0.9"
finite-state-machine = "0.1"

# 错误处理和结果类型
thiserror-no-std = "2.0"

# 时间和定时器
fugit = "0.3"
systick-monotonic = "1.0"

# 加密和安全
aes = { version = "0.8", default-features = false }
sha2 = { version = "0.10", default-features = false }
hmac = { version = "0.12", default-features = false }

# 数学和算法
crc = "3.0"
crc32fast = { version = "1.3", default-features = false }

# 平台特定HAL库 (条件编译)
[target.'cfg(feature = "stm32")'.dependencies]
stm32f4xx-hal = { version = "0.20", features = ["rt", "stm32f407"] }

[target.'cfg(feature = "esp32")'.dependencies]
esp32-hal = { version = "0.17", features = ["rt"] }

[target.'cfg(feature = "rp2040")'.dependencies]
rp2040-hal = { version = "0.9", features = ["rt", "critical-section-impl"] }

[target.'cfg(feature = "nrf52")'.dependencies]
nrf52840-hal = { version = "0.16", features = ["rt"] }

[dev-dependencies]
# 测试框架
defmt-test = "0.3"
defmt-rtt = "0.4"

# 模拟和测试工具
embedded-hal-mock = "0.10"

[features]
default = ["std-support"]

# 硬件平台支持
stm32 = []
esp32 = []
rp2040 = []
nrf52 = []

# 协议功能特性
std-support = []
async-support = ["embedded-hal-async"]
security = ["aes", "sha2", "hmac"]
compression = []
flow-control = []
error-correction = []

# 调试和分析
debug-protocol = ["log", "rtt-target"]
performance-analysis = []
protocol-tracing = []

# 二进制文件配置
[[bin]]
name = "protocol_demo"
path = "src/bin/protocol_demo.rs"

[[bin]]
name = "layer_test"
path = "src/bin/layer_test.rs"

[[bin]]
name = "state_machine_demo"
path = "src/bin/state_machine_demo.rs"

# 示例配置
[[example]]
name = "physical_layer"
path = "examples/physical_layer.rs"

[[example]]
name = "data_link_layer"
path = "examples/data_link_layer.rs"

[[example]]
name = "network_layer"
path = "examples/network_layer.rs"

[[example]]
name = "transport_layer"
path = "examples/transport_layer.rs"

[[example]]
name = "application_layer"
path = "examples/application_layer.rs"

[[example]]
name = "full_stack_demo"
path = "examples/full_stack_demo.rs"

# 优化配置
[profile.dev]
opt-level = 1
debug = true
lto = false
codegen-units = 16
panic = "abort"
incremental = true
overflow-checks = true

[profile.release]
opt-level = 3
debug = false
lto = "fat"
codegen-units = 1
panic = "abort"
strip = true
overflow-checks = false

# 协议分析优化配置
[profile.analysis]
inherits = "release"
opt-level = 2
debug = true
lto = "thin"
overflow-checks = true

# 内存优化配置
[profile.size]
inherits = "release"
opt-level = "z"
lto = "fat"
codegen-units = 1
panic = "abort"
strip = true

# 构建脚本
[build-dependencies]
cc = "1.0"

# 包元数据
[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[package.metadata.cross.target.thumbv7em-none-eabihf]
pre-build = [
    "dpkg --add-architecture $CROSS_DEB_ARCH",
    "apt-get update && apt-get install --assume-yes libc6-dev:$CROSS_DEB_ARCH"
]