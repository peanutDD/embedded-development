[package]
name = "smart-manufacturing"
version = "1.0.0"
edition = "2021"
authors = ["Industrial Systems Team <industrial@example.com>"]
description = "工业4.0智能生产线控制系统 - 多设备协调与实时数据采集"
keywords = ["industrial", "manufacturing", "industry4.0", "modbus", "ethernet"]
categories = ["embedded", "no-std", "industrial"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/example/embedded-development"
readme = "README.md"
homepage = "https://example.com/smart-manufacturing"
documentation = "https://docs.example.com/smart-manufacturing"

[[bin]]
name = "smart-manufacturing"
path = "src/main.rs"

[dependencies]
# FreeRTOS实时操作系统
freertos-rust = { version = "0.1", optional = true }

# 嵌入式核心库
cortex-m = { version = "0.7", features = ["critical-section-single-core"] }
cortex-m-rt = "0.7"
embedded-hal = "0.2"
nb = "1.0"
void = { version = "1.0", default-features = false }

# STM32F7 HAL (高性能工业控制器)
stm32f7xx-hal = { version = "0.7", features = ["stm32f767", "rt", "usb_hs"] }

# 网络通信
smoltcp = { version = "0.10", default-features = false, features = [
    "log", "medium-ethernet", "proto-ipv4", "proto-ipv6",
    "proto-dhcpv4", "socket-tcp", "socket-udp", "socket-raw"
], optional = true }
embedded-nal = { version = "0.7", optional = true }
embedded-nal-async = "0.7"

# Modbus协议栈
# modbus-core = { version = "0.3", default-features = false, optional = true }
# modbus-server = { version = "0.3", default-features = false, optional = true }
# modbus-client = { version = "0.3", default-features = false, optional = true }

# 工业通信协议
# 注意：以下协议crate可能需要根据实际可用性调整
# profinet = { version = "0.1", default-features = false, optional = true }
# ethercrab = { version = "0.4", default-features = false, optional = true, features = ["std"] }
# opc-ua = { version = "0.1", default-features = false, optional = true }

# 数据处理和分析
heapless = { version = "0.7", features = ["serde"] }
tinyvec = { version = "1.6", features = ["alloc"] }
smallvec = { version = "1.11", features = ["const_generics"] }

# 序列化和数据格式
serde = { version = "1.0", default-features = false, features = ["derive"], optional = true }
postcard = { version = "1.0", features = ["heapless"] }
json = { version = "0.12", default-features = false, optional = true }
cbor = { version = "0.4", default-features = false, optional = true }

# 时间和调度
fugit = "0.3"
embedded-time = "0.12"
chrono = { version = "0.4", default-features = false, features = ["serde"], optional = true }

# 数学和算法
libm = "0.2"
micromath = { version = "2.0", features = ["vector"] }
num-traits = { version = "0.2", default-features = false }
# statistics = { version = "0.4", default-features = false, optional = true } # 暂时注释以避免std冲突

# 加密和安全
aes = { version = "0.8", default-features = false, optional = true }
sha2 = { version = "0.10", default-features = false, optional = true }
hmac = { version = "0.12", default-features = false, optional = true }
rand_core = { version = "0.6", default-features = false, optional = true }

# 调试和日志
panic-halt = "0.2"
rtt-target = { version = "0.4", optional = true }
cortex-m-log = { version = "0.8", features = ["log-integration"], optional = true }
log = "0.4"

# 同步和原子操作
atomic-polyfill = "1.0"
critical-section = "1.1"
portable-atomic = { version = "1.0", features = ["critical-section"] }

# 内存管理
linked_list_allocator = "0.10"

# 错误处理
thiserror = { version = "1.0", default-features = false }

# 工业标准库
# iec61131 = { version = "0.1", default-features = false, optional = true }
# iec61850 = { version = "0.1", default-features = false, optional = true }

[profile.dev]
codegen-units = 1
debug = 2
debug-assertions = true
incremental = false
opt-level = "s"
overflow-checks = true
lto = false
panic = "abort"

[profile.release]
codegen-units = 1
debug = false
debug-assertions = false
incremental = false
lto = true
opt-level = "s"
overflow-checks = false
panic = "abort"
strip = true

[profile.release.build-override]
codegen-units = 8
debug = false
debug-assertions = false
opt-level = 0
overflow-checks = false

# 内存配置 (STM32F767)
[package.metadata.memory]
ram_start = 0x20000000
ram_size = "512K"
flash_start = 0x08000000
flash_size = "2048K"
stack_size = "16K"
heap_size = "128K"
network_buffer_size = "64K"
modbus_buffer_size = "8K"

# 工业系统配置
[package.metadata.industrial]
max_devices = 64
max_io_points = 1024
max_alarms = 256
max_trends = 128
scan_cycle_ms = 10
network_timeout_ms = 1000
modbus_timeout_ms = 500
data_retention_hours = 24
log_level = "info"
safety_level = "SIL2"

# 网络配置
[package.metadata.network]
ethernet_mtu = 1500
ip_address = "192.168.1.100"
subnet_mask = "255.255.255.0"
gateway = "192.168.1.1"
dns_server = "8.8.8.8"
modbus_port = 502
http_port = 80
https_port = 443
opc_ua_port = 4840

# 性能配置
[package.metadata.performance]
max_cpu_usage_percent = 80
max_memory_usage_percent = 85
max_network_latency_ms = 10
max_io_response_time_ms = 5
min_scan_frequency_hz = 100
max_concurrent_connections = 32
max_message_queue_size = 1024

# 构建配置
[package.metadata.build]
target = "thumbv7em-none-eabihf"
runner = "probe-rs run --chip STM32F767ZITx"
rustflags = [
  "-C", "link-arg=-Tlink.x",
  "-C", "link-arg=-Tdefmt.x",
  "-C", "link-arg=--nmagic",
  "-C", "link-arg=-Tethernet.x",
]

[package.metadata.docs.rs]
all-features = true
targets = ["thumbv7em-none-eabihf"]
rustdoc-args = ["--cfg", "docsrs"]

# 功能特性
[features]
default = [
    "ethernet-support", 
    "data-logging", "web-interface", "security"
]

# 操作系统后端
# freertos-backend = ["freertos-rust"]

# 通信协议
# modbus-support = ["modbus-core", "modbus-server", "modbus-client"]
ethernet-support = ["smoltcp", "embedded-nal"]
# profinet-support = ["profinet"]
# ethercat-support = ["ethercrab"]
# opc-ua-support = ["opc-ua"]

# 工业标准
# iec61131-support = ["iec61131"]
# iec61850-support = ["iec61850"]

# 数据处理
data-logging = ["chrono"] # "statistics" 暂时注释
data-compression = ["cbor"]
data-encryption = ["aes", "sha2", "hmac"]

# 用户界面
web-interface = ["json"]
rest-api = ["json", "serde"]

# 安全功能
security = ["aes", "sha2", "hmac", "rand_core"]
# functional-safety = ["iec61131-support"]

# 调试和测试
debug-output = ["rtt-target", "cortex-m-log"]
# performance-monitoring = ["statistics"] # 暂时注释
hardware-testing = []

# 硬件支持
# can-support = ["stm32f7xx-hal/can"]
usb-support = ["stm32f7xx-hal/usb_hs"]
# sdio-support = ["stm32f7xx-hal/sdio"]
# rng-support = ["stm32f7xx-hal/rng"]
# crypto-support = ["stm32f7xx-hal/cryp"]
# rtc-support = ["stm32f7xx-hal/rtc"]

# 开发依赖
[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.0"
quickcheck = "1.0"
quickcheck_macros = "1.0"
mockall = "0.11"

# 基准测试
[[bench]]
name = "modbus_performance"
harness = false
required-features = ["modbus-support"]

[[bench]]
name = "network_throughput"
harness = false
required-features = ["ethernet-support"]

[[bench]]
name = "io_scanning"
harness = false
required-features = ["performance-monitoring"]

# 示例程序
[[example]]
name = "basic_plc"
required-features = ["modbus-support"]

[[example]]
name = "ethernet_gateway"
required-features = ["ethernet-support", "modbus-support"]

[[example]]
name = "data_historian"
required-features = ["data-logging"]

[[example]]
name = "web_hmi"
required-features = ["web-interface"]

[[example]]
name = "safety_controller"
required-features = ["functional-safety"]

# 集成测试
[[test]]
name = "integration_tests"
path = "tests/integration.rs"
required-features = ["modbus-support", "ethernet-support"]

[[test]]
name = "performance_tests"
path = "tests/performance.rs"
required-features = ["performance-monitoring"]

[[test]]
name = "safety_tests"
path = "tests/safety.rs"
required-features = ["functional-safety"]