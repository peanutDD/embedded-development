[package]
name = "communication-hub-template"
version = "0.1.0"
edition = "2021"
authors = ["Embedded Rust Developer <dev@example.com>"]
description = "通用通信中心模板 - 多协议网关和数据路由"
license = "MIT"
repository = "https://github.com/example/embedded-development"
keywords = ["embedded", "gateway", "communication", "protocol", "no-std"]
categories = ["embedded", "network-programming"]

[[bin]]
name = "communication-hub"
path = "src/main.rs"

[dependencies]
# RTIC 实时框架
cortex-m = "0.7"
cortex-m-rt = "0.7"
rtic = { version = "2.0", features = ["thumbv7-backend"], optional = true }

# 嵌入式核心库
embedded-hal = "0.2"
embedded-io = "0.4"
nb = "1.0"
void = { version = "1.0", default-features = false }

# STM32F7 HAL (更高性能的处理器)
stm32f7xx-hal = { version = "0.7", features = ["stm32f746", "rt", "usb_hs"] }

# 网络协议栈
smoltcp = { version = "0.10", default-features = false, features = [
    "proto-ipv4", "proto-dhcpv4",
    "socket-tcp", "socket-udp", "socket-raw",
    "medium-ethernet", "phy-raw_socket"
]}
embedded-nal = "0.7"
embedded-nal-async = "0.6"

# 数据结构和集合
heapless = { version = "0.7", features = ["serde"] }
generic-array = "0.14"
tinyvec = { version = "1.6", features = ["alloc"] }
linked_list_allocator = "0.10"

# 序列化和协议
serde = { version = "1.0", default-features = false, features = ["derive"] }
postcard = { version = "1.0", features = ["heapless"] }
cobs = "0.2"
miniz_oxide = { version = "0.7", default-features = false }

# 工业通信协议
modbus = { version = "1.0", default-features = false, optional = true }
can-types = "0.9"
bxcan = { version = "0.7", optional = true }
# 注意：以下协议crate可能需要根据实际可用性调整
# profinet = { version = "0.1", default-features = false, optional = true }
# ethercrab = { version = "0.4", default-features = false, optional = true }
# opc-ua = { version = "0.1", default-features = false, optional = true }

# 无线通信
radio = "0.11"
# sx127x = { version = "0.1", optional = true }   # LoRa
# esp-at-nal = { version = "0.2", optional = true }  # WiFi
bluetooth-hci = { version = "0.1", optional = true }
zigbee = "0.1.0-alpha.3"

# MQTT 和 HTTP 客户端
rumqttc = { version = "0.22", default-features = false, optional = true }
embedded-tls = { version = "0.15", optional = true }
httparse = { version = "1.8", optional = true }

# 时间和调度
fugit = "0.3"
systick-monotonic = "1.0"
chrono = { version = "0.4", default-features = false }

# 数学和算法
libm = "0.2"
micromath = "2.0"
num-traits = { version = "0.2", default-features = false, features = ["libm"] }
crc = "3.0"

# 调试和日志
rtt-target = { version = "0.4", optional = true }
panic-rtt-target = { version = "0.1" }
log = "0.4"
rtt-log = { version = "0.2", optional = true }

# 同步和原子操作
critical-section = "1.1"
atomic-polyfill = "1.0"
portable-atomic = { version = "1.4", features = ["critical-section"] }

# 安全和加密
aes = { version = "0.8", default-features = false, optional = true }
sha2 = { version = "0.10", default-features = false, optional = true }
hmac = { version = "0.12", default-features = false, optional = true }
rand_core = { version = "0.6", default-features = false }

# 存储和文件系统
embedded-sdmmc = { version = "0.5", optional = true }
littlefs2 = { version = "0.3", optional = true }
sequential-storage = { version = "1.0", optional = true }

# USB 和串口
usb-device = "0.2"
usbd-serial = { version = "0.1", optional = true }
usbd-hid = { version = "0.6", optional = true }

# 错误处理
thiserror-no-std = "2.0"

[dev-dependencies]
cortex-m-semihosting = "0.5"
panic-semihosting = "0.6"

[profile.dev]
codegen-units = 1
debug = 2
debug-assertions = true
incremental = false
opt-level = 1
overflow-checks = true

[profile.release]
codegen-units = 1
debug = 2
debug-assertions = false
incremental = false
lto = "fat"
opt-level = "s"  # 优化代码大小
overflow-checks = false
panic = "abort"
strip = true

# 内存配置
[profile.dev.package."*"]
opt-level = "s"

[profile.release.package."*"]
opt-level = "s"

# 通信中心配置
[package.metadata.communication-hub]
# 支持的通信协议
protocols = [
    "ethernet",
    "wifi",
    "lora",
    "bluetooth",
    "zigbee",
    "can",
    "modbus",
    "profinet",
    "ethercat",
    "uart",
    "i2c",
    "spi",
    "usb"
]

# 网络服务
services = [
    "mqtt_broker",
    "http_server",
    "tcp_server",
    "udp_server",
    "dhcp_server",
    "dns_server",
    "ntp_client",
    "web_interface"
]

# 数据处理
data_processing = [
    "protocol_conversion",
    "data_routing",
    "message_queuing",
    "data_filtering",
    "data_aggregation",
    "data_compression",
    "data_encryption"
]

# 管理功能
management = [
    "device_discovery",
    "configuration",
    "monitoring",
    "diagnostics",
    "firmware_update",
    "remote_access"
]

# 网络配置
[package.metadata.network]
# 以太网配置
ethernet_mac = "02:00:00:00:00:01"
ethernet_ip = "192.168.1.100"
ethernet_netmask = "255.255.255.0"
ethernet_gateway = "192.168.1.1"

# WiFi 配置
wifi_ssid = "IndustrialNetwork"
wifi_password = "industrial123"
wifi_security = "WPA2"
wifi_channel = 6

# LoRaWAN 配置
lora_frequency = 868_000_000  # EU868
lora_bandwidth = 125_000
lora_spreading_factor = 7
lora_coding_rate = 5
lora_network_id = 1

# MQTT 配置
mqtt_broker_port = 1883
mqtt_max_clients = 10
mqtt_keepalive = 60
mqtt_qos_levels = [0, 1, 2]

# HTTP 服务器配置
http_port = 80
http_max_connections = 5
http_timeout = 30

# 协议配置
[package.metadata.protocols]
# Modbus 配置
modbus_slave_id = 1
modbus_baud_rate = 9600
modbus_data_bits = 8
modbus_stop_bits = 1
modbus_parity = "none"

# CAN 配置
can_bitrate = 500_000  # 500 kbps
can_sample_point = 0.875
can_sjw = 1
can_filters = 16

# Profinet 配置
profinet_device_name = "CommHub001"
profinet_vendor_id = 0x1234
profinet_device_id = 0x5678

# EtherCAT 配置
ethercat_station_address = 1
ethercat_vendor_id = 0x1234
ethercat_product_code = 0x5678

# 性能配置
[package.metadata.performance]
# CPU 配置
cpu_frequency = 216_000_000  # 216 MHz (STM32F7)
cache_enabled = true
mpu_enabled = true
fpu_enabled = true

# 内存配置
stack_size = 16384
heap_size = 32768
network_buffer_size = 8192
max_connections = 20

# 网络性能
max_packet_size = 1500
rx_buffer_count = 16
tx_buffer_count = 16
tcp_socket_count = 8
udp_socket_count = 4

# 定时器配置
timer_resolution = 1000  # 1 kHz
network_poll_interval = 1  # ms
watchdog_timeout = 60000  # 60 秒

# 构建配置
[package.metadata.build]
# 目标配置
target = "thumbv7em-none-eabihf"
linker_script = "memory.x"

# 调试配置
debug_interface = "swd"
debug_speed = 4000  # kHz
rtt_channels = 4

# 功能特性
[features]
default = ["ethernet", "modbus", "mqtt", "web-interface"]

# 网络协议
ethernet = ["smoltcp/medium-ethernet"]
# wifi = ["esp-at-nal"]
# lora = ["sx127x"]
bluetooth = ["bluetooth-hci"]
zigbee = []

# 工业协议
modbus-rtu = ["modbus"]
modbus-tcp = ["modbus", "ethernet"]
can-bus = ["bxcan"]
profinet = ["ethernet"]
ethercat = ["ethernet"]

# 网络服务
mqtt = ["rumqttc"]
http = ["httparse"]
web-interface = ["http"]
dhcp = ["smoltcp/proto-dhcpv4"]
dns = []
ntp = []

# 安全功能
tls = ["embedded-tls"]
encryption = ["aes", "sha2", "hmac"]
authentication = ["encryption"]

# 存储功能
sd-card = ["embedded-sdmmc"]
flash-storage = ["littlefs2"]
config-storage = ["sequential-storage"]

# USB 功能
usb-device = ["usbd-serial"]
usb-hid = ["usb-device", "usbd-hid"]

# 调试功能
debug-rtt = ["rtt-target", "rtt-log"]
debug-semihosting = []
network-debug = ["smoltcp/log"]

# 高级功能
firmware-update = ["flash-storage"]
remote-config = ["web-interface", "config-storage"]
data-logging = ["sd-card"]
real-time = ["rtic"]

# 开发依赖
[dev-dependencies.criterion]
version = "0.5"
default-features = false

# 基准测试
[[bench]]
name = "network_performance"
harness = false
required-features = ["ethernet"]

[[bench]]
name = "protocol_conversion"
harness = false
required-features = ["modbus-tcp", "mqtt"]

# 示例程序
[[example]]
name = "basic_gateway"
path = "examples/basic_gateway.rs"
required-features = ["ethernet", "modbus-tcp"]

[[example]]
name = "mqtt_bridge"
path = "examples/mqtt_bridge.rs"
required-features = ["wifi", "mqtt"]

[[example]]
name = "multi_protocol"
path = "examples/multi_protocol.rs"
required-features = ["ethernet", "can-bus", "modbus-rtu"]

[[example]]
name = "web_config"
path = "examples/web_config.rs"
required-features = ["web-interface"]

[[example]]
name = "secure_gateway"
path = "examples/secure_gateway.rs"
required-features = ["tls", "authentication"]

# 集成测试
[[test]]
name = "network_integration"
path = "tests/network_integration.rs"
required-features = ["ethernet"]

[[test]]
name = "protocol_test"
path = "tests/protocol_test.rs"
required-features = ["modbus-tcp", "can-bus"]

[[test]]
name = "security_test"
path = "tests/security_test.rs"
required-features = ["tls", "encryption"]