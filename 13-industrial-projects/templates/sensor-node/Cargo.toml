[package]
name = "sensor-node-template"
version = "0.1.0"
edition = "2021"
authors = ["Embedded Rust Developer <dev@example.com>"]
description = "通用传感器节点模板 - 支持多种传感器和无线通信"
license = "MIT"
repository = "https://github.com/example/embedded-development"
keywords = ["embedded", "sensor", "iot", "wireless", "no-std"]
categories = ["embedded", "hardware-support"]

[[bin]]
name = "sensor-node"
path = "src/main.rs"

[dependencies]
# RTIC 实时框架
cortex-m = "0.7"
cortex-m-rt = "0.7"
rtic = { version = "2.0", features = ["thumbv7-backend"] }

# 嵌入式核心库
embedded-hal = "0.2"
nb = "1.0"
void = { version = "1.0", default-features = false }

# STM32F4 HAL
stm32f4xx-hal = { version = "0.16", features = ["stm32f401", "rt", "usb_fs"] }

# 数据结构和集合
heapless = { version = "0.7", features = ["serde"] }
generic-array = "0.14"
tinyvec = { version = "1.6", features = ["alloc"] }

# 序列化和通信
serde = { version = "1.0", default-features = false, features = ["derive"] }
postcard = { version = "1.0", features = ["heapless"] }
cobs = "0.2"

# 时间和调度
fugit = "0.3"
systick-monotonic = "1.0"

# 数学和算法
libm = "0.2"
micromath = { version = "2.0", optional = true }
num-traits = { version = "0.2", default-features = false, features = ["libm"] }

# 调试和日志
rtt-target = { version = "0.4", optional = true }
panic-halt = "1.0"
panic-rtt-target = { version = "0.1" }
log = "0.4"
rtt-log = { version = "0.2", optional = true }

# 同步和原子操作
critical-section = "1.1"
atomic-polyfill = "1.0"
portable-atomic = { version = "1.4", features = ["critical-section"] }

# 传感器驱动
# bme280 = { version = "0.4", optional = true }  # 温湿度气压传感器
mpu6050 = { version = "0.1", optional = true }  # 六轴传感器
ads1x1x = { version = "0.2", optional = true }  # ADC 传感器
max44009 = { version = "0.1", optional = true }  # 光照传感器
sht3x = { version = "0.1", optional = true }    # 温湿度传感器

# 无线通信
radio = { version = "0.11", optional = true }
# sx127x = { version = "0.1", optional = true }   # LoRa 模块
# esp-at-nal = { version = "0.2", optional = true }  # ESP32 AT 命令

# 低功耗管理
# stm32-low-power = { version = "0.1", optional = true }
# rtc-datetime = { version = "0.1", optional = true }

# 错误处理
cortex-m-semihosting = { version = "0.5", optional = true }

[dev-dependencies]
panic-semihosting = "0.6"

[profile.dev]
codegen-units = 1
debug = 2
debug-assertions = true
incremental = false
opt-level = 1
overflow-checks = true

[profile.release]
codegen-units = 1
debug = 2
debug-assertions = false
incremental = false
lto = "fat"
opt-level = "s"  # 优化代码大小
overflow-checks = false
panic = "abort"
strip = true

# 内存配置
[profile.dev.package."*"]
opt-level = "s"

[profile.release.package."*"]
opt-level = "s"

# 传感器节点配置
[package.metadata.sensor-node]
# 支持的传感器类型
sensors = [
    "temperature",
    "humidity", 
    "pressure",
    "light",
    "motion",
    "air_quality",
    "soil_moisture",
    "vibration"
]

# 通信协议
communication = [
    "lora",
    "wifi", 
    "bluetooth",
    "zigbee",
    "uart",
    "i2c",
    "spi"
]

# 电源管理
power_modes = [
    "always_on",
    "periodic_wake",
    "event_driven",
    "ultra_low_power"
]

# 数据处理
data_processing = [
    "raw_data",
    "filtered",
    "averaged",
    "compressed",
    "encrypted"
]

# 网络配置
[package.metadata.network]
# LoRaWAN 配置
lora_frequency = 868_000_000  # EU868
lora_bandwidth = 125_000
lora_spreading_factor = 7
lora_coding_rate = 5

# WiFi 配置
wifi_ssid = "SensorNetwork"
wifi_password = "sensor123"
wifi_security = "WPA2"

# MQTT 配置
mqtt_broker = "mqtt.example.com"
mqtt_port = 1883
mqtt_client_id = "sensor_node_001"
mqtt_topic_prefix = "sensors/"

# 传感器配置
[package.metadata.sensors]
# 采样配置
sampling_rate = 1000  # Hz
sampling_interval = 60  # 秒
buffer_size = 100

# 校准参数
calibration_enabled = true
temperature_offset = 0.0
humidity_offset = 0.0
pressure_offset = 0.0

# 阈值设置
temperature_min = -40.0
temperature_max = 85.0
humidity_min = 0.0
humidity_max = 100.0
pressure_min = 300.0
pressure_max = 1100.0

# 性能配置
[package.metadata.performance]
# CPU 配置
cpu_frequency = 84_000_000  # 84 MHz
adc_resolution = 12
adc_sample_time = 480

# 内存配置
stack_size = 8192
heap_size = 4096
buffer_count = 10

# 定时器配置
timer_resolution = 1000  # 1 kHz
watchdog_timeout = 30000  # 30 秒

# 构建配置
[package.metadata.build]
# 目标配置
target = "thumbv7em-none-eabihf"
linker_script = "memory.x"

# 调试配置
debug_interface = "swd"
debug_speed = 4000  # kHz
rtt_channels = 3

# 功能特性
[features]
default = ["std-sensors"]

# 标准传感器支持
std-sensors = ["mpu6050", "max44009"]

# 扩展传感器支持
ext-sensors = ["ads1x1x", "sht3x"]

# 通信协议
# lora-comm = ["sx127x"]
# wifi-comm = ["esp-at-nal"]
bluetooth-comm = []

# 电源管理
# low-power = ["stm32-low-power"]
# ultra-low-power = ["low-power"]

# 数据处理
data-compression = []
data-encryption = []
data-filtering = ["micromath"]

# 调试功能
debug-rtt = ["rtt-target", "rtt-log"]
debug-semihosting = ["cortex-m-semihosting"]

# 开发依赖
[dev-dependencies.criterion]
version = "0.5"
default-features = false

# 基准测试
[[bench]]
name = "sensor_performance"
harness = false
required-features = ["std-sensors"]

# 示例程序
[[example]]
name = "basic_sensor"
path = "examples/basic_sensor.rs"
required-features = ["std-sensors"]

[[example]]
name = "lora_sensor"
path = "examples/lora_sensor.rs"
required-features = ["lora-comm"]

[[example]]
name = "multi_sensor"
path = "examples/multi_sensor.rs"
required-features = ["std-sensors", "ext-sensors"]

[[example]]
name = "low_power_sensor"
path = "examples/low_power_sensor.rs"
required-features = ["low-power"]

# 集成测试
[[test]]
name = "sensor_integration"
path = "tests/sensor_integration.rs"
required-features = ["std-sensors"]

[[test]]
name = "communication_test"
path = "tests/communication_test.rs"
required-features = ["lora-comm"]