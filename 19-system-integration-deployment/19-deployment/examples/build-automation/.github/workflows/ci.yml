name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv7em-none-eabihf
          components: rustfmt, clippy

      - name: Install ARM toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-none-eabi binutils-arm-none-eabi

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run cargo check
        run: cargo check --target thumbv7em-none-eabihf

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run cargo clippy
        run: cargo clippy --target thumbv7em-none-eabihf --all-targets --all-features -- -D warnings

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv7em-none-eabihf

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo test (host)
        run: cargo test --lib
        continue-on-error: true

      - name: Install cargo-nextest
        run: cargo install cargo-nextest --locked
        continue-on-error: true

      - name: Run nextest
        run: cargo nextest run --lib
        continue-on-error: true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [check, test]
    strategy:
      matrix:
        target:
          - thumbv7em-none-eabihf
          - thumbv6m-none-eabi
        profile:
          - dev
          - release
          - size-opt

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install ARM toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-none-eabi binutils-arm-none-eabi

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        run: |
          if [ "${{ matrix.profile }}" = "dev" ]; then
            cargo build --target ${{ matrix.target }}
          elif [ "${{ matrix.profile }}" = "release" ]; then
            cargo build --target ${{ matrix.target }} --release
          else
            cargo build --target ${{ matrix.target }} --profile ${{ matrix.profile }}
          fi

      - name: Generate binary artifacts
        run: |
          mkdir -p artifacts
          
          # Determine the profile directory
          if [ "${{ matrix.profile }}" = "dev" ]; then
            PROFILE_DIR="debug"
          else
            PROFILE_DIR="${{ matrix.profile }}"
          fi
          
          ELF_FILE="target/${{ matrix.target }}/${PROFILE_DIR}/build-automation"
          
          if [ -f "$ELF_FILE" ]; then
            # Generate binary files
            arm-none-eabi-objcopy -O binary "$ELF_FILE" "artifacts/build-automation-${{ matrix.target }}-${{ matrix.profile }}.bin"
            arm-none-eabi-objcopy -O ihex "$ELF_FILE" "artifacts/build-automation-${{ matrix.target }}-${{ matrix.profile }}.hex"
            
            # Generate size information
            arm-none-eabi-size "$ELF_FILE" > "artifacts/size-${{ matrix.target }}-${{ matrix.profile }}.txt"
            
            # Generate build info
            cat > "artifacts/build-info-${{ matrix.target }}-${{ matrix.profile }}.txt" << EOF
          Build Information
          =================
          Target: ${{ matrix.target }}
          Profile: ${{ matrix.profile }}
          Build Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Git Hash: $(git rev-parse --short HEAD)
          Git Branch: $(git branch --show-current || echo "unknown")
          Workflow: ${{ github.workflow }}
          Run ID: ${{ github.run_id }}
          
          Binary Sizes:
          $(arm-none-eabi-size "$ELF_FILE")
          EOF
          else
            echo "ELF file not found: $ELF_FILE"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ matrix.target }}-${{ matrix.profile }}
          path: artifacts/
          retention-days: 30

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Run security audit
        run: cargo audit

      - name: Install cargo-deny
        run: cargo install cargo-deny --locked

      - name: Run cargo-deny
        run: cargo deny check
        continue-on-error: true

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv7em-none-eabihf

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-doc-${{ hashFiles('**/Cargo.lock') }}

      - name: Build documentation
        run: cargo doc --target thumbv7em-none-eabihf --no-deps --document-private-items

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/thumbv7em-none-eabihf/doc

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [check, test, build, security]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv7em-none-eabihf

      - name: Install ARM toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-none-eabi binutils-arm-none-eabi

      - name: Build release binary
        run: cargo build --target thumbv7em-none-eabihf --release

      - name: Generate release artifacts
        run: |
          mkdir -p release-artifacts
          
          ELF_FILE="target/thumbv7em-none-eabihf/release/build-automation"
          
          # Generate binary files
          arm-none-eabi-objcopy -O binary "$ELF_FILE" "release-artifacts/build-automation.bin"
          arm-none-eabi-objcopy -O ihex "$ELF_FILE" "release-artifacts/build-automation.hex"
          
          # Generate checksums
          cd release-artifacts
          sha256sum *.bin *.hex > checksums.txt
          cd ..
          
          # Generate release notes
          cat > release-artifacts/RELEASE_NOTES.md << EOF
          # Release ${{ github.event.release.tag_name }}
          
          ## Build Information
          - Target: thumbv7em-none-eabihf
          - Build Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - Git Hash: $(git rev-parse HEAD)
          - Workflow Run: ${{ github.run_id }}
          
          ## Binary Sizes
          \`\`\`
          $(arm-none-eabi-size "$ELF_FILE")
          \`\`\`
          
          ## Files
          - \`build-automation.bin\`: Raw binary file for flashing
          - \`build-automation.hex\`: Intel HEX format file
          - \`checksums.txt\`: SHA256 checksums for verification
          
          ## Installation
          Flash the binary file to your STM32F4 device using your preferred method:
          - ST-Link: \`st-flash write build-automation.bin 0x8000000\`
          - OpenOCD: \`openocd -f interface/stlink.cfg -f target/stm32f4x.cfg -c "program build-automation.bin 0x08000000 verify reset exit"\`
          EOF

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-artifacts/build-automation.bin
            release-artifacts/build-automation.hex
            release-artifacts/checksums.txt
            release-artifacts/RELEASE_NOTES.md
          body_path: release-artifacts/RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: [check, test, build]
    environment: staging
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-thumbv7em-none-eabihf-release
          path: artifacts/

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # 这里可以添加实际的部署逻辑
          # 例如：上传到测试服务器、更新设备固件等
          
          echo "Deployment completed successfully"
          echo "Staging URL: https://staging.example.com"
          echo "Binary hash: $(sha256sum artifacts/build-automation-thumbv7em-none-eabihf-release.bin)"

  notify:
    name: Notify
    runs-on: ubuntu-latest
    if: always()
    needs: [check, test, build, security]
    steps:
      - name: Notify on success
        if: ${{ needs.check.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' }}
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "All checks passed, build artifacts generated."

      - name: Notify on failure
        if: ${{ needs.check.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "❌ CI/CD Pipeline failed!"
          echo "Please check the logs and fix the issues."
          exit 1