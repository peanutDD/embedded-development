[package]
name = "iot_platform"
version = "0.1.0"
edition = "2021"
authors = ["Embedded Developer <dev@example.com>"]
description = "IoT平台系统 - 设备管理、数据处理、规则引擎和可视化"
license = "MIT OR Apache-2.0"
repository = "https://github.com/example/embedded-development"
keywords = ["embedded", "iot", "platform", "microservices", "deployment"]
categories = ["embedded", "web-programming", "network-programming"]

[dependencies]
# 异步运行时
tokio = { version = "1.35", features = ["full"] }
async-std = { version = "1.12", optional = true }
futures = "0.3"

# Web框架和HTTP
axum = { version = "0.7", features = ["ws", "multipart", "macros"] }
hyper = { version = "0.14", features = ["full"] }
tower = { version = "0.4", features = ["full"] }
tower-http = { version = "0.5", features = ["full"] }
reqwest = { version = "0.11", features = ["json", "stream", "multipart"] }

# gRPC和Protobuf
tonic = { version = "0.10", features = ["gzip"] }
prost = "0.12"
prost-types = "0.12"

# 数据库
sqlx = { version = "0.7", features = ["runtime-tokio-rustls", "postgres", "mysql", "sqlite", "chrono", "uuid", "json"] }
mongodb = { version = "2.8", optional = true }
redis = { version = "0.24", features = ["tokio-comp", "connection-manager"], optional = true }
influxdb = { version = "0.7", optional = true }

# 消息队列
rdkafka = { version = "0.36", features = ["cmake-build", "ssl-vendored"] }
lapin = { version = "2.3", optional = true }
rumqttd = { version = "0.18", optional = true }
rumqttc = { version = "0.24", features = ["websocket"] }

# 服务发现和配置
consul = { version = "0.4", optional = true }
etcd-rs = { version = "1.0", optional = true }
config = { version = "0.14", features = ["yaml", "json", "toml"] }

# 监控和指标
prometheus = { version = "0.13", features = ["process"] }
opentelemetry = { version = "0.21", features = ["rt-tokio"] }
opentelemetry-jaeger = { version = "0.20", features = ["rt-tokio"] }
opentelemetry-prometheus = "0.14"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"] }
tracing-opentelemetry = "0.22"

# 序列化和数据处理
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_yaml = "0.9"
toml = "0.8"
bincode = "1.3"
postcard = "1.0"
csv = "1.3"

# 时间处理
chrono = { version = "0.4", features = ["serde"] }
time = { version = "0.3", features = ["serde", "macros"] }

# 错误处理
anyhow = "1.0"
thiserror = "1.0"
color-eyre = "0.6"

# 加密和安全
ring = "0.17"
rustls = { version = "0.21", features = ["dangerous_configuration"] }
rustls-pemfile = "1.0"
jsonwebtoken = "9.2"
argon2 = "0.5"
uuid = { version = "1.6", features = ["v4", "serde"] }

# 数据结构和算法
indexmap = { version = "2.1", features = ["serde"] }
dashmap = "5.5"
lru = "0.12"
priority-queue = "1.3"
petgraph = "0.6"

# 并发和同步
crossbeam = "0.8"
crossbeam-channel = "0.5"
parking_lot = "0.12"
tokio-util = { version = "0.7", features = ["full"] }

# 网络工具
ipnet = "2.9"
trust-dns-resolver = "0.23"
socket2 = "0.5"

# 文件系统和路径
walkdir = "2.4"
tempfile = "3.8"
tar = "0.4"
flate2 = "1.0"
zip = "0.6"

# 数学和统计
nalgebra = "0.32"
statrs = "0.16"
approx = "0.5"
rand = "0.8"
rand_distr = "0.4"

# 系统信息
sysinfo = "0.30"
procfs = { version = "0.16", optional = true }

# 容器运行时
bollard = { version = "0.15", optional = true }
k8s-openapi = { version = "0.20", optional = true }
kube = { version = "0.87", features = ["runtime", "derive"], optional = true }

# 模板引擎
tera = { version = "1.19", optional = true }
handlebars = { version = "4.5", optional = true }

# 图像处理
image = { version = "0.24", optional = true }

# 嵌入式支持
embedded-hal = { version = "0.2", optional = true }
nb = { version = "1.1", optional = true }

# 平台特定依赖
[target.'cfg(target_os = "linux")'.dependencies]
systemd = { version = "0.10", optional = true }
nix = "0.27"

[target.'cfg(target_os = "windows")'.dependencies]
winapi = { version = "0.3", features = ["full"] }
windows-service = { version = "0.6", optional = true }

# 开发依赖
[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.4"
quickcheck = "1.0"
mockall = "0.12"
serial_test = "3.0"
tempfile = "3.8"
pretty_assertions = "1.4"
wiremock = "0.5"
testcontainers = "0.15"

# 构建依赖
[build-dependencies]
tonic-build = "0.10"
prost-build = "0.12"

# 功能特性
[features]
default = ["postgres", "redis", "kafka", "monitoring", "web-ui"]

# 数据库支持
postgres = ["sqlx/postgres"]
mysql = ["sqlx/mysql"]
sqlite = ["sqlx/sqlite"]
mongodb = ["dep:mongodb"]
influxdb = ["dep:influxdb"]

# 消息队列
kafka = ["rdkafka"]
rabbitmq = ["dep:lapin"]
mqtt-broker = ["dep:rumqttd"]

# 服务发现
consul = ["dep:consul"]
etcd = ["dep:etcd-rs"]

# 监控和可观测性
monitoring = ["prometheus", "opentelemetry", "tracing-opentelemetry"]
jaeger = ["opentelemetry-jaeger"]

# 容器和编排
docker = ["dep:bollard"]
kubernetes = ["dep:k8s-openapi", "dep:kube"]

# Web界面
web-ui = ["dep:tera", "dep:handlebars"]
image-processing = ["dep:image"]

# 系统服务
systemd = ["dep:systemd"]
windows-service = ["dep:windows-service"]

# 嵌入式支持
embedded = ["dep:embedded-hal", "dep:nb"]

# 异步运行时
async-std-runtime = ["dep:async-std"]

# 二进制目标
[[bin]]
name = "iot_platform"
path = "src/main.rs"

[[bin]]
name = "device_manager"
path = "src/bin/device_manager.rs"

[[bin]]
name = "data_processor"
path = "src/bin/data_processor.rs"

[[bin]]
name = "rule_engine"
path = "src/bin/rule_engine.rs"

[[bin]]
name = "api_gateway"
path = "src/bin/api_gateway.rs"

[[bin]]
name = "web_dashboard"
path = "src/bin/web_dashboard.rs"

# 示例
[[example]]
name = "device_simulation"
path = "examples/device_simulation.rs"

[[example]]
name = "data_ingestion"
path = "examples/data_ingestion.rs"

[[example]]
name = "rule_configuration"
path = "examples/rule_configuration.rs"

[[example]]
name = "dashboard_demo"
path = "examples/dashboard_demo.rs"

# 基准测试
[[bench]]
name = "data_processing"
harness = false

[[bench]]
name = "rule_execution"
harness = false

[[bench]]
name = "api_performance"
harness = false

# 优化配置
[profile.release]
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"
strip = true

[profile.dev]
opt-level = 1
debug = true
overflow-checks = true

[profile.bench]
opt-level = 3
debug = false
lto = true

# 工作空间配置
[workspace]
members = [
    ".",
    "crates/device-manager",
    "crates/data-processor",
    "crates/rule-engine",
    "crates/api-gateway",
    "crates/web-dashboard",
    "crates/common"
]

# 元数据
[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[package.metadata.deb]
maintainer = "IoT Platform Team <team@example.com>"
copyright = "2024, IoT Platform Team"
license-file = ["LICENSE", "4"]
extended-description = """\
A comprehensive IoT platform for device management, data processing, \
rule engine, and visualization dashboard."""
depends = "$auto, systemd"
section = "utility"
priority = "optional"
assets = [
    ["target/release/iot_platform", "usr/bin/", "755"],
    ["config/iot_platform.toml", "etc/iot_platform/", "644"],
    ["systemd/iot_platform.service", "lib/systemd/system/", "644"],
]